/* Example Context Map written with 'ContextMapper DSL' */
ContextMap FinanceContextMap {
	type = SYSTEM_LANDSCAPE
	state = AS_IS
	
	/* Add bounded contexts to this context map: */
	contains BankSlipDomainContext
	contains RefundSlipContext
	contains TEDPaymentContext
	contains TEFPaymentContext
	
	/* Define the context relationships: */ 

	BankSlipDomainContext[U,S]->[D,C] RefundSlipContext {
		exposedAggregates = Documents
		downstreamRights = INFLUENCER
	}

	TEFPaymentContext[U,PL]->[D,ACL] RefundSlipContext {

	}

	TEDPaymentContext[U,PL]->[D,ACL] RefundSlipContext {

	}
	
	TEFPaymentContext Shared-Kernel TEDPaymentContext {
	}	
	
}

/* Bounded Context Definitions */
BoundedContext BankSlipDomainContext implements BankSlipDomain {
	type = FEATURE
	domainVisionStatement = "Gerencia os contratos e policia todos os boletos."
	responsibilities = "Boletos, Contratos, Compliance"
	implementationTechnology = "Golang, PHP Web Application"
	
	Aggregate Documents {
		Entity Document { 
			aggregateRoot
			
			- Payer pin
			- BarCode pin
			String dueDate
			String beneficiary
		}
		
		ValueObject Payer {
			String name
			String cpf
		}

		ValueObject BarCode {
			String code key
		}
	
	}	
}

BoundedContext RefundSlipContext implements RefundSlipDomain {
	type = FEATURE
	responsibilities = "Reembolsa transação de boleto"
	domainVisionStatement = "Parceiro responsável por calcular e reembolsar as transações de boletos."
	

}

BoundedContext TEDPaymentContext implements AcquirerDomain {
	type = SYSTEM
	domainVisionStatement = "Exclusivo para processar pagamentos por TED"
	responsibilities = "TED, Pagamento"
	implementationTechnology = "PHP Web Application"

}

BoundedContext TEFPaymentContext implements AcquirerDomain {
	type = SYSTEM
	domainVisionStatement = "Exclusivo para processar pagamentos por TEF"
	responsibilities = "TEF, Pagamento"
	implementationTechnology = "JEE"

}

BoundedContext RiskManagementContext implements RiskManagementDomain {
	type = FEATURE
	domainVisionStatement = "Utiliza data do AcquirerDomain para calcular risco."
	responsibilities = "Cálculo de risco das transações com as adquirentes"
	implementationTechnology = "PHP Web Application"
	
	Aggregate Risks {
		Entity CustomerRiskFactor {
			aggregateRoot
			
			int totalRiskFactor
			- List<Risk> risks
		}
		
		ValueObject Risk {
			int likelihood
			String risk
		}
	}
}

/* Domain & Subdomain Definitions */
Domain FinanceDomain {
	Subdomain BankSlipDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain gerencia tudo relacionado aos boletos."
	}
	Subdomain RiskManagementDomain {
		type = GENERIC_SUBDOMAIN
		domainVisionStatement = "Subdomain monitora todas as transações com risco."
	}
	Subdomain RefundSlipDomain {
		type = SUPPORTING_DOMAIN
		domainVisionStatement = "Subdomain calcula e gerencia todos os reembolsos dos boletos"
	}
	Subdomain AcquirerDomain {
		type = GENERIC_SUBDOMAIN
		domainVisionStatement = "Subdomain responsável por gerenciar todos os processos com as APIs dos adquirentes como Original e Stone."
	}
}